{
  "name": "q-mode",
  "tagline": "Emacs mode for editing q scripts and communicating with inferior q/qcon buffers",
  "body": "# q-mode\r\n\r\n## Features\r\n\r\nq-mode is a major mode for editing q (the language written by [Kx Systems](http://www.kx.com')) in [Emacs](https://www.gnu.org/software/emacs/).\r\n\r\nSome of its major features include:\r\n- syntax highlighting (font lock),\r\n- interaction with inferior q[con] instance,\r\n- scans declarations and places them in a menu.\r\n\r\n## Installation\r\n\r\nTo load `q-mode` on-demand, instead of at startup, add this to your\r\ninitialization file\r\n\r\n```elisp\r\n(autoload 'q-mode \"q-mode\")\r\n```\r\nThe add the following to your initialization file to open all .k\r\nand .q files with q-mode as major mode automatically:\r\n\r\n```elisp\r\n(add-to-list 'auto-mode-alist '(\"\\\\.[kq]\\\\'\" . q-mode))\r\n```\r\n\r\nIf you load ess-mode, it will attempt to associate the .q extension\r\nwith S-mode.  To stop this, add the following lines to your\r\ninitialization file.\r\n\r\n```elisp\r\n(defun remove-ess-q-extn ()\r\n (when (assoc \"\\\\.[qsS]\\\\'\" auto-mode-alist)\r\n  (setq auto-mode-alist\r\n        (remassoc \"\\\\.[qsS]\\\\'\" auto-mode-alist))))\r\n(add-hook 'ess-mode-hook 'remove-ess-q-extn)\r\n(add-hook 'inferior-ess-mode-hook 'remove-ess-q-extn)\r\n```\r\n\r\n## Usage\r\n\r\nUse `M-x q` to start an inferior q shell. Or use `M-x qcon` to\r\ncreate an inferior qcon shell to communicate with an existing q\r\nprocess.  Both can be prefixed with the universal-argument `C-u` to\r\ncustomize the arguments used to start the processes.\r\n\r\nThe first q[con] session opened becomes the activated buffer.\r\nTo open a new session and send code to the new buffer, it must be\r\nactived.  Switch to the desired buffer and type `C-c M-RET` to\r\nactivate it.\r\n\r\nThe following commands are available to interact with an inferior\r\nq[con] process/buffer. `C-c C-l` sends a single line, `C-c C-f`\r\nsends the surrounding function, `C-c C-r` sends the selected region\r\nand `C-c C-b` sends the whole buffer.  If the source file exists on\r\nthe same machine as the q process, `C-c M-l` can be used to load\r\nthe file associated with the active buffer.\r\n\r\n## Customization\r\n\r\n`M-x customize-group` can be used to customize the `q` group.\r\nSpecifically, the `inferior-q-program-name` and\r\n`inferior-qcon-program-name` variables can be changed depending on\r\nyour environment.\r\n\r\nQ-mode indents each level based on `q-indent-step`.  To indent code\r\nbased on {}-, ()-, and []-groups instead of equal width tabs, you\r\ncan set this value to nil.\r\n\r\nThe variables `q-msg-prefix` and `q-msg-postfix` can be customized\r\nto prefix and postfix every msg sent to the inferior q[con]\r\nprocess. This can be used to change directories before evaluating\r\ndefinitions within the q process and then changing back to the root\r\ndirectory. To make the variables change values depending on which\r\nfile they are sent from, values can be defined in a single line a\r\nthe top of each .q file:\r\n\r\n```q\r\n/ -*- q-msg-prefix: \"system \\\"d .jnp\\\";\"; q-msg-postfix: \";system \\\"d .\\\"\";-*-\r\n```\r\n\r\nor at the end:\r\n\r\n```q\r\n/ Local Variables:\r\n/ q-msg-prefix: \"system \\\"d .jnp\\\";\"\r\n/ q-msg-postfix: \";system \\\"d .\\\"\"\r\n/ End:\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}